bash -lc '
set -euo pipefail

owner="thehorizonholding"
horiz_repo="HorizCoin"
saas_repo="saas-platform-exact-spelling-"

echo "==> Choose deployment path for HorizCoin web demo:"
select DEPLOY in "render" "aws" ; do
  case $DEPLOY in
    render) DEPLOY="render"; break;;
    aws) DEPLOY="aws"; break;;
    *) echo "Invalid choice";;
  esac
done
echo "Using deployment path: $DEPLOY"

merge_pr_safe() {
  local repo="$1" pr="$2" title
  if gh pr view "$pr" -R "$owner/$repo" >/dev/null 2>&1; then
    title="$(gh pr view "$pr" -R "$owner/$repo" --json title -q .title)"
    echo "Merging #$pr: $title"
    gh pr merge "$pr" -R "$owner/$repo" --merge --delete-branch --auto || gh pr merge "$pr" -R "$owner/$repo" --squash --delete-branch --auto
  else
    echo "Skip: PR #$pr not found in $owner/$repo"
  fi
}

close_pr_safe() {
  local repo="$1" pr="$2" reason="$3"
  if gh pr view "$pr" -R "$owner/$repo" >/dev/null 2>&1; then
    echo "Closing #$pr ($reason)"
    gh pr close "$pr" -R "$owner/$repo" --delete-branch || true
  fi
}

echo "==> HorizCoin: merge workspace + CI"
merge_pr_safe "$horiz_repo" 39    # Create minimal workspace with CI
close_pr_safe "$horiz_repo" 36 "superseded by #39"
close_pr_safe "$horiz_repo" 38 "superseded by #39"

echo "==> HorizCoin: merge public HTTP server"
merge_pr_safe "$horiz_repo" 41    # HTTP server + Render blueprint

if [ "$DEPLOY" = "render" ]; then
  echo "==> HorizCoin: merge Render/Railway deployment infra"
  merge_pr_safe "$horiz_repo" 43
  echo "Render/Railway deployment merged. Use the README/DEPLOYMENT.md in the repo to provision and get a public URL."
else
  echo "==> HorizCoin: merge AWS Lightsail deployment infra"
  merge_pr_safe "$horiz_repo" 44
  echo "To deploy via AWS Lightsail, set repo secrets in $owner/$horiz_repo:"
  echo "  gh secret set AWS_ACCESS_KEY_ID     -R $owner/$horiz_repo --body \"<value>\""
  echo "  gh secret set AWS_SECRET_ACCESS_KEY -R $owner/$horiz_repo --body \"<value>\""
  echo "  gh secret set AWS_REGION            -R $owner/$horiz_repo --body \"us-east-1\""
  echo "  (optional) gh secret set LIGHTSAIL_SERVICE_NAME -R $owner/$horiz_repo --body \"horizcoin-web\""
  echo "Then run the Deploy to AWS Lightsail workflow in GitHub Actions to get the public URL."
fi

echo "==> Optional: merge core data model (review first if needed)"
# Uncomment if you want to merge immediately:
# merge_pr_safe "$horiz_repo" 32

echo "==> Optional: apply branch protection on main"
default_branch="$(gh repo view "$owner/$horiz_repo" --json defaultBranchRef -q .defaultBranchRef.name)"
read -r -p "Apply basic branch protection to $owner/$horiz_repo:$default_branch? [y/N] " ans
if [[ "${ans:-N}" =~ ^[Yy]$ ]]; then
  gh api -X PUT "repos/$owner/$horiz_repo/branches/$default_branch/protection" \
    -H "Accept: application/vnd.github+json" \
    -f required_status_checks='{"strict":true,"contexts":[]}' \
    -f enforce_admins=true \
    -f required_pull_request_reviews='{"required_approving_review_count":1,"dismiss_stale_reviews":true,"require_code_owner_reviews":false}' \
    -f restrictions='null' \
    -f allow_force_pushes=false \
    -f allow_deletions=false \
    -f block_creations=false \
    -f required_linear_history=true \
    -f required_conversation_resolution=true
  echo "Branch protection applied."
else
  echo "Skipped branch protection."
fi

echo "==> SaaS repo: open bootstrap PR if not present"
tmp="$(mktemp -d)"; pushd "$tmp" >/dev/null
gh repo clone "$owner/$saas_repo" .
bootstrap_branch="chore/repo-bootstrap-$(date +%Y%m%d-%H%M%S)"
if gh pr list -R "$owner/$saas_repo" --search "chore: repository bootstrap in:title" --json number | grep -q .; then
  echo "Bootstrap PR appears to exist already in $owner/$saas_repo. Skipping."
else
  git checkout -b "$bootstrap_branch"
  mkdir -p .github/ISSUE_TEMPLATE .github/workflows
  cat > .github/CODEOWNERS <<EOF
# Default ownership
* @thehorizonholding
EOF
  cat > .github/pull_request_template.md <<EOF
## Summary
- Describe the change and reasoning.

## Type of change
- [ ] Feature
- [ ] Bug fix
- [ ] Chore / Maintenance
- [ ] Docs

## Checklist
- [ ] I’ve run the CI locally (if applicable).
- [ ] I’ve added/updated tests (if applicable).
- [ ] I’ve updated documentation (if applicable).
- [ ] I’ve considered security, secrets, and sensitive data handling.
- [ ] I’ve linked related issues and added context.

## Screenshots / Demos (optional)
EOF
  cat > .github/ISSUE_TEMPLATE/bug_report.md <<EOF
---
name: Bug report
about: Create a report to help us improve
labels: bug
---
### Describe the bug
A clear and concise description of what the bug is.
### To Reproduce
1. ...
### Expected behavior
...
### Environment
- OS:
- Version / Commit SHA:
EOF
  cat > .github/ISSUE_TEMPLATE/feature_request.md <<EOF
---
name: Feature request
about: Suggest an idea for this project
labels: enhancement
---
### Problem
...
### Proposed solution
...
### Alternatives
...
EOF
  cat > .github/ISSUE_TEMPLATE/config.yml <<EOF
blank_issues_enabled: false
contact_links:
  - name: Security reports
    url: https://github.com/thehorizonholding
    about: Please report security issues privately as described in SECURITY.md
EOF
  cat > .github/workflows/checks.yml <<EOF
name: Checks
on:
  pull_request:
  push:
    branches: [ main, master ]
permissions:
  contents: read
jobs:
  shell:
    if: \${{ hashFiles('**/*.sh') != '' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: sudo apt-get update && sudo apt-get install -y shellcheck shfmt
      - run: if [ -z "\$(git ls-files '\''*.sh'\'')" ]; then exit 0; fi; git ls-files '\''*.sh'\'' | xargs -r -n1 shellcheck
      - run: if [ -z "\$(git ls-files '\''*.sh'\'')" ]; then exit 0; fi; git ls-files '\''*.sh'\'' | xargs -r -n100 shfmt -i 2 -ci -s -d
  node:
    if: \${{ hashFiles('package.json') != '' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: npm }
      - run: npm ci || npm install
      - run: npm run -s lint || echo "No lint script"
      - run: npm run -s build || echo "No build script"
      - run: npm test --silent || echo "No test script"
  foundry:
    if: \${{ hashFiles('**/foundry.toml') != '' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: foundry-rs/foundry-toolchain@v1
        with: { version: stable }
      - run: forge build
      - run: forge test -vvv
EOF
  cat > .github/dependabot.yml <<EOF
version: 2
updates:
  - package-ecosystem: github-actions
    directory: /
    schedule: { interval: daily }
    open-pull-requests-limit: 5
    reviewers: [ "thehorizonholding" ]
  - package-ecosystem: npm
    directory: /
    schedule: { interval: weekly }
    open-pull-requests-limit: 5
    reviewers: [ "thehorizonholding" ]
EOF
  cat > SECURITY.md <<EOF
# Security Policy
## Supported versions
Security fixes are applied to the default branch.
## Reporting a vulnerability
Please report security issues privately. Do not create public GitHub issues for security reports.
- Email: security@thehorizonholding.example (replace with your security contact)
- Alternatively, open a GitHub Security Advisory draft (if enabled) and request to involve maintainers.
We will acknowledge receipt within 72 hours and strive to provide an initial assessment and remediation plan within 7 business days.
EOF
  cat > .editorconfig <<EOF
root = true
[*]
end_of_line = lf
charset = utf-8
insert_final_newline = true
indent_style = space
indent_size = 2
trim_trailing_whitespace = true
[*.md]
trim_trailing_whitespace = false
EOF
  cat > .gitattributes <<EOF
* text=auto eol=lf
*.sh text eol=lf
*.lock linguist-generated
EOF
  # MIT license for SaaS repo
  cat > LICENSE <<EOF
MIT License
Copyright (c) 2025 thehorizonholding
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction...
EOF

  git add .
  git commit -m "chore: repository bootstrap (CI, templates, Dependabot, security)"
  git push -u origin "$bootstrap_branch"

  pr_body="$(mktemp)"
  cat > "$pr_body" <<EOF
This PR bootstraps the repository with:
- CI workflow (Shell/Node/Foundry when applicable)
- CODEOWNERS, PR/Issue templates, SECURITY.md, .editorconfig, .gitattributes
- Dependabot for Actions and npm
- MIT LICENSE
EOF
  gh pr create -R "$owner/$saas_repo" \
    --base "$(git remote show origin | sed -n "s/.*HEAD branch: //p")" \
    --head "$bootstrap_branch" \
    --title "chore: repository bootstrap (CI, templates, Dependabot, security)" \
    --body-file "$pr_body" \
    --label "chore" \
    --reviewer "$owner"
fi
popd >/dev/null

echo "==> Done."
'
