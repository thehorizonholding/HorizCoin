const express = require('express');
const bodyParser = require('body-parser');
const { Pool } = require('pg');
const jwt = require('jsonwebtoken');
const { v4: uuidv4 } = require('uuid');

const app = express();
app.use(bodyParser.json());

// DB pool
const pool = new Pool({ connectionString: process.env.DATABASE_URL });
const STRIPE_SECRET = process.env.STRIPE_SECRET || '';
const JWT_SECRET = process.env.JWT_SECRET || 'change-me';

// Basic health route
app.get('/healthz', (req, res) => res.json({ status: 'ok' }));

// Middleware: simple JWT auth for internal calls
function authMiddleware(req, res, next) {
  const auth = req.headers['authorization'];
  if (!auth) return res.status(401).json({ error: 'no auth' });
  const token = auth.replace('Bearer ', '');
  try {
    const payload = jwt.verify(token, JWT_SECRET);
    req.client = payload;
    next();
  } catch (e) {
    return res.status(401).json({ error: 'invalid token' });
  }
}

// Admin: create account
app.post('/api/accounts', async (req, res) => {
  const { account_id } = req.body;
  if (!account_id) return res.status(400).json({ error: 'missing' });
  await pool.query('INSERT INTO accounts(account_id, balance, created_at) VALUES($1,0,NOW()) ON CONFLICT DO NOTHING', [account_id]);
  return res.json({ result: 'created' });
});

// Create top-up (called by billing system after payment)
app.post('/api/credits/topup', async (req, res) => {
  // body: { account_id, credits, tx_ref (optional) }
  const { account_id, credits, tx_ref } = req.body;
  if (!account_id || typeof credits !== 'number') return res.status(400).json({ error: 'missing' });
  const id = uuidv4();
  await pool.query('BEGIN');
  try {
    await pool.query('INSERT INTO credits_ledger(id, account_id, delta, type, ref, created_at) VALUES($1,$2,$3,$4,$5,NOW())', [id, account_id, credits, 'topup', tx_ref || null]);
    await pool.query('INSERT INTO accounts(account_id, balance, created_at) VALUES($1,$2,NOW()) ON CONFLICT DO NOTHING', [account_id, 0]);
    await pool.query('UPDATE accounts SET balance = balance + $1 WHERE account_id = $2', [credits, account_id]);
    await pool.query('COMMIT');
    return res.json({ result: 'ok', id });
  } catch (err) {
    await pool.query('ROLLBACK');
    console.error('topup error', err);
    return res.status(500).json({ error: 'db_error' });
  }
});

// Query balance
app.get('/api/credits/balance/:account', authMiddleware, async (req, res) => {
  const account_id = req.params.account;
  const r = await pool.query('SELECT balance FROM accounts WHERE account_id=$1', [account_id]);
  if (r.rowCount === 0) return res.status(404).json({ error: 'notfound' });
  return res.json({ balance: Number(r.rows[0].balance) });
});

// Usage deduction - idempotent via usage_id
app.post('/api/credits/usage', authMiddleware, async (req, res) => {
  // body: { account_id, usage_id, cost, meta }
  const { account_id, usage_id, cost, meta } = req.body;
  if (!account_id || !usage_id || typeof cost !== 'number') return res.status(400).json({ error: 'missing' });

  // idempotency check
  const exists = await pool.query('SELECT id FROM usage_log WHERE usage_id=$1', [usage_id]);
  if (exists.rowCount > 0) return res.json({ result: 'already_recorded' });

  // check balance
  const bal = await pool.query('SELECT balance FROM accounts WHERE account_id=$1', [account_id]);
  if (bal.rowCount === 0) return res.status(404).json({ error: 'account not found' });
  if (Number(bal.rows[0].balance) < cost) return res.status(402).json({ error: 'insufficient' });

  // deduct and record
  await pool.query('BEGIN');
  try {
    await pool.query('UPDATE accounts SET balance = balance - $1 WHERE account_id = $2', [cost, account_id]);
    const id = uuidv4();
    await pool.query('INSERT INTO usage_log(id, usage_id, account_id, cost, meta, created_at) VALUES($1,$2,$3,$4,$5,NOW())', [id, usage_id, account_id, cost, meta ? JSON.stringify(meta) : null]);
    await pool.query('INSERT INTO credits_ledger(id, account_id, delta, type, ref, created_at) VALUES($1,$2,$3,$4,$5,NOW())', [uuidv4(), account_id, -cost, 'usage', usage_id]);
    await pool.query('COMMIT');
    return res.json({ result: 'ok' });
  } catch (err) {
    await pool.query('ROLLBACK');
    console.error('usage error', err);
    return res.status(500).json({ error: 'db_error' });
  }
});

// Basic admin metrics endpoint (restricted in production)
app.get('/api/admin/ledger/:account', authMiddleware, async (req, res) => {
  const account_id = req.params.account;
  const r = await pool.query('SELECT id, delta, type, ref, created_at FROM credits_ledger WHERE account_id=$1 ORDER BY created_at DESC LIMIT 100', [account_id]);
  return res.json({ items: r.rows });
});

const PORT = process.env.PORT || 4000;
app.listen(PORT, () => console.log('Credits service listening', PORT));
