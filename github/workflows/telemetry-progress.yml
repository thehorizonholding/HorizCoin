name: Telemetry Progress (Daily)

on:
  schedule:
    - cron: "0 3 * * *"
  workflow_dispatch:
    inputs:
      append_line:
        description: "Optional progress log message to append (message only, date auto-added)."
        required: false
        type: string
      entries:
        description: "Number of recent progress entries to summarize."
        required: false
        default: "10"
        type: string
      strict:
        description: "Set to true to fail on malformed lines. (Default warn mode = false)"
        required: false
        default: "false"
        type: choice
        options:
          - "false"
          - "true"

permissions:
  contents: write
  issues: write

env:
  PROGRESS_DOC: docs/telemetry-initiative-execution.md
  META_ISSUE: 25

concurrency:
  group: telemetry-progress
  cancel-in-progress: true

jobs:
  progress:
    name: Parse & Summarize Progress
    runs-on: ubuntu-latest
    if: |
      github.event_name != 'schedule' ||
      (github.event_name == 'schedule' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch))
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Optionally append new progress entry
        if: ${{ github.event.inputs.append_line != '' }}
        env:
          APPEND_LINE: ${{ github.event.inputs.append_line }}
        shell: bash
        run: |
          set -euo pipefail
          DATE_UTC=$(date -u +'%Y-%m-%d')
          LINE="- ${DATE_UTC} - ${APPEND_LINE}"
          echo "Prepared line: $LINE"
          if [ ! -f "$PROGRESS_DOC" ]; then
            echo "Progress document not found: $PROGRESS_DOC" >&2
            exit 1
          fi
          if grep -Fxq "$LINE" "$PROGRESS_DOC"; then
            echo "Line already present; skipping."
          else
            sed -i -e '$a\' "$PROGRESS_DOC"
            echo "$LINE" >> "$PROGRESS_DOC"
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git add "$PROGRESS_DOC"
            git commit -m "chore(progress): append progress entry"
            git push
          fi

      - name: Extract progress section
        id: extract
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f "$PROGRESS_DOC" ]; then
            echo "Progress document not found: $PROGRESS_DOC" >&2
            exit 1
          fi
          awk '/^##[[:space:]]+Progress Log/{flag=1;next} flag{print}' "$PROGRESS_DOC" > _progress_raw.txt || true
          echo "Raw extracted (first 120 lines or fewer):"
          sed -n '1,120p' _progress_raw.txt || true
          grep -E '^- [0-9]{4}-[0-9]{2}-[0-9]{2} - ' _progress_raw.txt > _progress_valid.txt || true
          grep -E '^- ' _progress_raw.txt | grep -vE '^- [0-9]{4}-[0-9]{2}-[0-9]{2} - ' > _progress_malformed.txt || true
          VALID_COUNT=$(wc -l < _progress_valid.txt | tr -d ' ' || echo 0)
          MAL_COUNT=$(wc -l < _progress_malformed.txt | tr -d ' ' || echo 0)
          echo "Valid lines: $VALID_COUNT"
          echo "Malformed lines: $MAL_COUNT"
          ENTRIES="${{ github.event.inputs.entries }}"
          if ! echo "$ENTRIES" | grep -Eq '^[0-9]+$'; then
            ENTRIES=10
          fi
          tail -n "$ENTRIES" _progress_valid.txt | tac > _recent.txt || true
          {
            echo "recent<<'EOF'"
            cat _recent.txt
            echo "EOF"
            echo "valid_count=$VALID_COUNT"
            echo "malformed_count=$MAL_COUNT"
          } >> "$GITHUB_OUTPUT"
          {
            echo "Telemetry Progress Summary"
            echo "Generated: $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            echo
            echo "Valid entries: $VALID_COUNT"
            echo "Malformed entries: $MAL_COUNT"
            echo
            echo "Most recent (up to $ENTRIES):"
            cat _recent.txt
            echo
            if [ "$MAL_COUNT" -gt 0 ]; then
              echo "Malformed lines (first 10 shown):"
              head -n 10 _progress_malformed.txt
            fi
          } > progress_summary.txt
          jq -n \
            --arg generated "$(date -u +'%Y-%m-%dT%H:%M:%SZ')" \
            --argjson valid "$VALID_COUNT" \
            --argjson malformed "$MAL_COUNT" \
            --arg entries "$ENTRIES" \
            --argfile recent <(jq -R -s 'split(\"\\n\")[:-1]' _recent.txt 2>/dev/null || echo '[]') \
            '{
              generated: $generated,
              valid_count: $valid,
              malformed_count: $malformed,
              recent_limit: ($entries|tonumber),
              recent: $recent
            }' > progress_summary.json
          STRICT="${{ github.event.inputs.strict }}"
          if [ "$STRICT" = "true" ] && [ "$MAL_COUNT" -gt 0 ]; then
            echo "Strict mode enabled and malformed lines detected."
            exit 2
          fi

      - name: Emit warnings (warn mode)
        if: ${{ steps.extract.outputs.malformed_count != '0' && github.event.inputs.strict != 'true' }}
        shell: bash
        run: |
          echo "::warning title=Malformed Progress Lines Detected::${{ steps.extract.outputs.malformed_count }} malformed progress line(s) found. See artifacts or re-run with 'strict: true' to enforce failure."
          echo "Sample malformed:"
          head -n 10 _progress_malformed.txt || true

      - name: Compute project completion %
        id: scope
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ env.META_ISSUE }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${ISSUE_NUMBER}" ]; then
            echo "No META_ISSUE set; skipping scope calculation."
            {
              echo "total_points=0"
              echo "done_points=0"
              echo "percent=0.00"
            } >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "Fetching issue #${ISSUE_NUMBER}"
          curl -s -H "Authorization: Bearer $GH_TOKEN" \
               -H "Accept: application/vnd.github+json" \
               "https://api.github.com/repos/${{ github.repository }}/issues/${ISSUE_NUMBER}" \
            | jq -r '.body' > issue_body.md || true
          if [ ! -s issue_body.md ]; then
            echo "Issue body empty/unavailable."
            {
              echo "total_points=0"
              echo "done_points=0"
              echo "percent=0.00"
            } >> "$GITHUB_OUTPUT"
            exit 0
          fi
          STRETCH_LINE=$(grep -n -E '^##[[:space:]]+Stretch' issue_body.md | head -n1 | cut -d: -f1 || echo "")
          if [ -n "$STRETCH_LINE" ]; then
            head -n $((STRETCH_LINE-1)) issue_body.md > scope_section.md
          else
            cp issue_body.md scope_section.md
          fi
          grep -E '^- \[[ xX]\] \([0-9]+\)' scope_section.md > checklist.txt || true
          TOTAL=$(awk -F'[()]' '{sum+=$2} END{print sum+0}' checklist.txt 2>/dev/null || echo 0)
          DONE=$(grep -E '^- \[[xX]\]' checklist.txt | awk -F'[()]' '{sum+=$2} END{print sum+0}' 2>/dev/null || echo 0)
          if [ "$TOTAL" -gt 0 ]; then
            PCT=$(awk -v d="$DONE" -v t="$TOTAL" 'BEGIN{printf "%.2f", (d/t)*100}')
          else
            PCT="0.00"
          fi
          echo "Computed progress: $PCT% ($DONE / $TOTAL pts)"
          {
            echo "total_points=$TOTAL"
            echo "done_points=$DONE"
            echo "percent=$PCT"
          } >> "$GITHUB_OUTPUT"

      - name: Update Meta Issue (comment with summary)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ env.META_ISSUE }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "$ISSUE_NUMBER" ]; then
            echo "No ISSUE_NUMBER set; skipping comment."
            exit 0
          fi
          if [ ! -f progress_summary.json ]; then
            echo "progress_summary.json missing; cannot post."
            exit 0
          fi
          GENERATED=$(jq -r '.generated' progress_summary.json)
          VALID=$(jq -r '.valid_count' progress_summary.json)
          MAL=$(jq -r '.malformed_count' progress_summary.json)
          LIMIT=$(jq -r '.recent_limit' progress_summary.json)
          DONE_POINTS='${{ steps.scope.outputs.done_points }}'
          TOTAL_POINTS='${{ steps.scope.outputs.total_points }}'
          PERCENT='${{ steps.scope.outputs.percent }}'
          {
            echo "### Telemetry Progress Run ($GENERATED UTC)"
            echo ""
            echo "#### Project Completion"
            echo "- Completion: ${PERCENT:-0.00}% (${DONE_POINTS:-0} / ${TOTAL_POINTS:-0} pts)"
            echo ""
            echo "#### Log Summary"
            echo "- Valid entries: $VALID"
            echo "- Malformed entries: $MAL"
            echo "- Recent sample (limit $LIMIT):"
            echo ""
            if [ -s _recent.txt ]; then
              sed 's/^/  - /' _recent.txt
            else
              echo "  - _None_"
            fi
            if [ "$MAL" -gt 0 ]; then
              echo ""
              echo "_Malformed lines detected; consider cleanup._"
            fi
            echo ""
            echo "<details><summary>Raw JSON (progress log)</summary>"
            echo
            echo '```json'
            cat progress_summary.json
            echo '```'
            echo "</details>"
            echo ""
            echo "<sub>Scope calc excludes Stretch section; automation alpha.</sub>"
          } > issue_comment.md
          STATUS=$(curl -s -o /tmp/post.out -w "%{http_code}" \
            -H "Authorization: Bearer $GH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            -X POST \
            "https://api.github.com/repos/${{ github.repository }}/issues/$ISSUE_NUMBER/comments" \
            -d @<(jq -Rn --arg body "$(cat issue_comment.md)" '{body:$body}'))
          if echo "$STATUS" | grep -qE '20[0-9]'; then
            echo "Comment posted (HTTP $STATUS)."
          else
            echo "Failed to post comment (HTTP $STATUS)"
            echo "Response:"
            cat /tmp/post.out || true
            exit 1
          fi

      - name: Upload summary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: telemetry-progress-summary
          path: |
            progress_summary.txt
            progress_summary.json
          retention-days: 7

      - name: Job Summary
        shell: bash
        run: |
          {
            echo "## Telemetry Progress Summary"
            echo "**Valid entries:** ${{ steps.extract.outputs.valid_count }}  "
            echo "**Malformed entries:** ${{ steps.extract.outputs.malformed_count }}  "
            echo ""
            echo "### Recent Entries"
            if [ -s _recent.txt ]; then
              sed 's/^/- /' _recent.txt
            else
              echo "_No recent entries found_"
            fi
            if [ "${{ steps.extract.outputs.malformed_count }}" != "0" ]; then
              echo ""
              echo "### Malformed (sample)"
              sed 's/^/- /' _progress_malformed.txt | head -n 10
            fi
            echo ""
            echo "### Project Completion"
            echo "- ${{ steps.scope.outputs.percent }}% (${{ steps.scope.outputs.done_points }} / ${{ steps.scope.outputs.total_points }} pts)"
            echo ""
            echo "_Mode: $([ \"${{ github.event.inputs.strict }}\" = \"true\" ] && echo 'Strict' || echo 'Warn')_"
            echo ""
            echo "<sub>Concurrency group: telemetry-progress</sub>"
          } >> "$GITHUB_STEP_SUMMARY"
