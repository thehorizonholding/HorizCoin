name: SBOM Generation

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  schedule:
    # Generate SBOM weekly
    - cron: '0 6 * * 1'
  workflow_dispatch:

jobs:
  generate-sbom:
    name: Generate Software Bill of Materials
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1

      - name: Install SBOM tools
        run: |
          # Install syft for SBOM generation
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
          
          # Install grype for vulnerability scanning
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin

      - name: Build contracts
        run: |
          forge build

      - name: Extract dependencies from Foundry
        run: |
          echo "# HorizCoin Dependencies" > dependencies.txt
          echo "## Foundry Dependencies" >> dependencies.txt
          echo "" >> dependencies.txt
          
          # Extract from foundry.toml
          if [ -f "foundry.toml" ]; then
            echo "### Foundry Configuration" >> dependencies.txt
            grep -E "(lib|remappings)" foundry.toml >> dependencies.txt || true
            echo "" >> dependencies.txt
          fi
          
          # Extract from lib directory
          if [ -d "lib" ]; then
            echo "### Library Dependencies" >> dependencies.txt
            find lib -name "*.toml" -o -name "package.json" -o -name "*.md" | head -20 >> dependencies.txt || true
            echo "" >> dependencies.txt
          fi
          
          # Extract contract imports
          echo "### Contract Dependencies" >> dependencies.txt
          find src -name "*.sol" -exec grep -H "^import" {} \; | head -50 >> dependencies.txt || true

      - name: Generate contract SBOM
        run: |
          echo "Generating SBOM for smart contracts..."
          
          # Create a simple SBOM for smart contracts
          cat > contracts-sbom.json << EOF
          {
            "bomFormat": "CycloneDX",
            "specVersion": "1.4",
            "serialNumber": "urn:uuid:$(uuidgen)",
            "version": 1,
            "metadata": {
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "tools": [
                {
                  "vendor": "HorizCoin",
                  "name": "manual-sbom-generator",
                  "version": "1.0.0"
                }
              ],
              "component": {
                "type": "application",
                "name": "horizcoin-contracts",
                "version": "${{ github.ref_name }}",
                "description": "HorizCoin smart contract ecosystem"
              }
            },
            "components": [
          EOF
          
          # Add OpenZeppelin components
          cat >> contracts-sbom.json << EOF
              {
                "type": "library",
                "name": "openzeppelin-contracts",
                "version": "v5.0.0",
                "description": "OpenZeppelin smart contract library",
                "supplier": {
                  "name": "OpenZeppelin",
                  "url": ["https://github.com/OpenZeppelin/openzeppelin-contracts"]
                },
                "licenses": [
                  {
                    "license": {
                      "id": "MIT"
                    }
                  }
                ]
              },
              {
                "type": "library", 
                "name": "forge-std",
                "version": "v1.7.0",
                "description": "Foundry standard library",
                "supplier": {
                  "name": "Foundry",
                  "url": ["https://github.com/foundry-rs/forge-std"]
                },
                "licenses": [
                  {
                    "license": {
                      "id": "MIT"
                    }
                  }
                ]
              }
            ]
          }
          EOF

      - name: Generate repository SBOM
        run: |
          # Generate SBOM for the entire repository
          syft . -o spdx-json=repo-sbom.spdx.json || true
          syft . -o cyclonedx-json=repo-sbom.cyclonedx.json || true

      - name: Vulnerability scan
        run: |
          echo "Running vulnerability scan..."
          grype . -o json --file vulnerability-report.json || true
          grype . -o table --file vulnerability-report.txt || true

      - name: Generate dependency report
        run: |
          echo "# HorizCoin Dependency and Security Report" > dependency-report.md
          echo "**Generated**: $(date -u)" >> dependency-report.md
          echo "**Commit**: ${{ github.sha }}" >> dependency-report.md
          echo "**Branch**: ${{ github.ref_name }}" >> dependency-report.md
          echo "" >> dependency-report.md
          
          echo "## Smart Contract Dependencies" >> dependency-report.md
          echo "### OpenZeppelin Contracts" >> dependency-report.md
          echo "- **Version**: v5.0.0 (or as specified in remappings)" >> dependency-report.md
          echo "- **License**: MIT" >> dependency-report.md
          echo "- **Purpose**: Core smart contract primitives" >> dependency-report.md
          echo "- **Used Components**: ERC20, Governance, Access Control, Security" >> dependency-report.md
          echo "" >> dependency-report.md
          
          echo "### Foundry Standard Library" >> dependency-report.md
          echo "- **Version**: v1.7.0 (or latest)" >> dependency-report.md
          echo "- **License**: MIT" >> dependency-report.md
          echo "- **Purpose**: Testing and deployment utilities" >> dependency-report.md
          echo "" >> dependency-report.md
          
          echo "## HorizCoin Contract Inventory" >> dependency-report.md
          echo "### Core Contracts" >> dependency-report.md
          find src -name "*.sol" | while read file; do
            name=$(basename "$file" .sol)
            echo "- **$name**: $file" >> dependency-report.md
          done
          echo "" >> dependency-report.md
          
          echo "## Security Analysis" >> dependency-report.md
          if [ -f "vulnerability-report.txt" ]; then
            echo "### Vulnerability Scan Results" >> dependency-report.md
            echo '```' >> dependency-report.md
            head -50 vulnerability-report.txt >> dependency-report.md || true
            echo '```' >> dependency-report.md
          else
            echo "Vulnerability scan data not available." >> dependency-report.md
          fi
          echo "" >> dependency-report.md
          
          echo "## License Compliance" >> dependency-report.md
          echo "- **HorizCoin Contracts**: MIT License" >> dependency-report.md
          echo "- **OpenZeppelin**: MIT License" >> dependency-report.md
          echo "- **Forge Standard**: MIT License" >> dependency-report.md
          echo "- **Compliance Status**: ✅ All dependencies use compatible licenses" >> dependency-report.md
          echo "" >> dependency-report.md
          
          echo "## Recommendations" >> dependency-report.md
          echo "- Regularly update OpenZeppelin contracts to latest stable version" >> dependency-report.md
          echo "- Monitor security advisories for all dependencies" >> dependency-report.md
          echo "- Perform security audits before mainnet deployment" >> dependency-report.md
          echo "- Keep this SBOM updated with any dependency changes" >> dependency-report.md

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v3
        with:
          name: sbom-artifacts
          path: |
            contracts-sbom.json
            repo-sbom.*.json
            vulnerability-report.*
            dependency-report.md
            dependencies.txt

      - name: Create SBOM release asset (on tags)
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          # Create a release-ready SBOM package
          mkdir sbom-release
          cp contracts-sbom.json sbom-release/
          cp dependency-report.md sbom-release/
          [ -f repo-sbom.cyclonedx.json ] && cp repo-sbom.cyclonedx.json sbom-release/
          [ -f vulnerability-report.json ] && cp vulnerability-report.json sbom-release/
          
          # Create checksums
          cd sbom-release
          sha256sum * > checksums.txt
          cd ..
          
          # Create tarball
          tar -czf horizcoin-sbom-${{ github.ref_name }}.tar.gz sbom-release/

      - name: Upload release SBOM
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v3
        with:
          name: release-sbom
          path: horizcoin-sbom-${{ github.ref_name }}.tar.gz

  validate-sbom:
    name: Validate SBOM
    runs-on: ubuntu-latest
    needs: generate-sbom
    
    steps:
      - uses: actions/checkout@v4

      - name: Download SBOM artifacts
        uses: actions/download-artifact@v3
        with:
          name: sbom-artifacts

      - name: Validate SBOM format
        run: |
          echo "Validating SBOM formats..."
          
          # Check if JSON files are valid
          if [ -f "contracts-sbom.json" ]; then
            echo "Validating contracts SBOM..."
            python3 -m json.tool contracts-sbom.json > /dev/null && echo "✅ contracts-sbom.json is valid JSON" || echo "❌ contracts-sbom.json is invalid JSON"
          fi
          
          if [ -f "repo-sbom.cyclonedx.json" ]; then
            echo "Validating repository SBOM..."
            python3 -m json.tool repo-sbom.cyclonedx.json > /dev/null && echo "✅ repo-sbom.cyclonedx.json is valid JSON" || echo "❌ repo-sbom.cyclonedx.json is invalid JSON"
          fi

      - name: Check dependency completeness
        run: |
          echo "Checking dependency completeness..."
          
          # Check if key dependencies are listed
          if [ -f "dependency-report.md" ]; then
            grep -q "OpenZeppelin" dependency-report.md && echo "✅ OpenZeppelin dependency documented" || echo "❌ OpenZeppelin dependency missing"
            grep -q "forge-std" dependency-report.md && echo "✅ Forge std dependency documented" || echo "❌ Forge std dependency missing"
          fi

  publish-sbom:
    name: Publish SBOM
    runs-on: ubuntu-latest
    needs: [generate-sbom, validate-sbom]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Download SBOM artifacts
        uses: actions/download-artifact@v3
        with:
          name: sbom-artifacts

      - name: Publish to GitHub Pages (if configured)
        run: |
          echo "SBOM artifacts ready for publication"
          echo "Configure GitHub Pages deployment if needed"
          
          # Create index page for SBOMs
          cat > index.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
              <title>HorizCoin SBOM</title>
              <meta charset="utf-8">
          </head>
          <body>
              <h1>HorizCoin Software Bill of Materials</h1>
              <p>Generated on: $(date -u)</p>
              <p>Commit: ${{ github.sha }}</p>
              
              <h2>Available SBOMs</h2>
              <ul>
                  <li><a href="contracts-sbom.json">Smart Contracts SBOM (CycloneDX)</a></li>
                  <li><a href="dependency-report.md">Dependency Report</a></li>
                  <li><a href="vulnerability-report.json">Vulnerability Report</a></li>
              </ul>
              
              <h2>Security Contact</h2>
              <p>For security issues: security@horizcoin.org</p>
          </body>
          </html>
          EOF

      - name: Store SBOM in repository
        run: |
          echo "SBOM generation completed successfully"
          echo "Files ready for storage or publication"
          ls -la *.json *.md *.txt || true